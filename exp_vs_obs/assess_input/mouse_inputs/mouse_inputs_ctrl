'''
Author: Viktoria_Haghani
Project: mouse_inputs
Genome:
  Name: mm10
  Location: https://hgdownload.cse.ucsc.edu/goldenPath/mm10/bigZips/chromFa.tar.gz
Reads:
  Samples:
    grp1:
    - SRR2119603
    - SRR2119604
  Controls:
    ctl1:
    - SRR2119603
    - SRR2119604
Readtype: single
Peaktype: narrow
Aligner: bwa_mem
Deduplicator: samtools
Peakcaller: macs3
Threads: 6
'''

wildcard_constraints:
	sample='[a-zA-Z0-9_]+',
	control='[a-zA-Z0-9_]+'

Samples = {
	'grp1': ['SRR2119603', 'SRR2119604'],
}
Controls = {
	'ctl1': ['SRR2119603', 'SRR2119604'],
}

src = '/share/korflab/home/viki/rocketchip'

sample_group_names = [group for group in Samples]
control_group_names = [group for group in Controls]
samples = []
for group in sample_group_names:
	for sample in Samples[group]: samples.append(sample)
controls = []
for group in control_group_names:
	for sample in Controls[group]: controls.append(sample)

rule all:
	input:
		expand("02_fastqc_analysis/{sample}_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}_fastqc.html", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=controls),

		expand("06_macs3_peaks/{sample}_{control}_peaks.xls", sample=sample_group_names,
			control=control_group_names),

		expand("05_bigwig_files/{sample}.bw", sample=samples)

rule make_directories:
	output:
		directory("00_logs/"),
		directory("01_raw_data/"),
		directory("02_fastqc_analysis/"),
		directory("03_sam_files/"),
		directory("04_bam_files/"),
		directory("05_bigwig_files/"),
		directory("06_macs3_peaks/")
	shell:
		"mkdir 00_logs 01_raw_data 02_fastqc_analysis 03_sam_files 04_bam_files "
		"05_bigwig_files 06_macs3_peaks"

rule download_genome:
	output: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/chromFa.tar.gz"
	log: "00_logs/download_genome.log"
	run:
		shell("mkdir '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10' -p")
		shell("wget 'https://hgdownload.cse.ucsc.edu/goldenPath/mm10/bigZips/chromFa.tar.gz' -O '{output}' 2> '{log}'")

rule process_genome:
	input: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/chromFa.tar.gz"
	output: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/mm10.fa"
	log: "00_logs/process_genome.log"
	run:
		shell("tar -xzf {input} -C /share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/")
		shell("cat /share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/*.fa > {output} 2> {log}")
		shell("rm /share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/chr*.fa")

rule index_genome:
	input: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/mm10.fa"
	output:
		fa = "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10.fa",
		indexers = multiext("/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10", ".amb", ".ann", ".bwt", ".pac", ".sa")
	log: "00_logs/index_genome.log"
	run:
		shell("bwa index -p '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10' -a bwtsw '{input}' 2> '{log}'")
		shell("ln -sf '{input}' '{output.fa}'")
		
rule link_indexed_genome:
	input: multiext("/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10", ".amb", ".ann", ".bwt", ".pac", ".sa", ".fa")
	output: multiext("01_raw_data/mm10", ".amb", ".ann", ".bwt", ".pac", ".sa", ".fa")
	log: "00_logs/link_indexed_genome.log"
	run:
		shell("ln -sf '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10.amb' '01_raw_data/mm10.amb' 2> {log}")
		shell("ln -sf '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10.ann' '01_raw_data/mm10.ann'")
		shell("ln -sf '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10.bwt' '01_raw_data/mm10.bwt'")
		shell("ln -sf '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10.pac' '01_raw_data/mm10.pac'")
		shell("ln -sf '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10.sa' '01_raw_data/mm10.sa'")
		shell("ln -sf '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/mm10/bwa_indexed_mm10/mm10.fa' '01_raw_data/mm10.fa'")

rule download_samples:
	output: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/single/{sample}/{sample}.sra"
	log: "00_logs/{sample}_download_data.log"
	shell: "prefetch {wildcards.sample} -O '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/single/' 2> '{log}'"
	
rule sra_to_fastq:
	input: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/single/{sample}/{sample}.sra"
	output: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/single/{sample}.fastq.gz"
	log: "00_logs/{sample}_sra_to_fastq.log"
	shell: """
	fasterq-dump '{input}' --outdir '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/single/' 2> '{log}'
	gzip '/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/single/{wildcards.sample}.fastq'
	"""

rule link_reads:
	input: "/share/korflab/home/viki/rocketchip_tests/exp_vs_obs/assess_input/mouse_inputs/single/{sample}.fastq.gz"
	output: "01_raw_data/{sample}.fastq.gz"
	log: "00_logs/{sample}_link_reads.log"
	shell: "ln -sf '{input}' '{output}'"
		

rule fastqc_preprocessing:
	input:
		"01_raw_data/{sample}.fastq.gz"
	output:
		"02_fastqc_analysis/{sample}_fastqc.html",
		"02_fastqc_analysis/{sample}_fastqc.zip"
	log:
		"00_logs/{sample}_fastqc_precheck.log"
	shell:
		"fastqc '{input}' --outdir 02_fastqc_analysis/ 2> '{log}'"

rule align_reads:
	input:
		genome = multiext("01_raw_data/mm10", ".amb", ".ann", ".bwt", ".pac", ".sa"),
		r = "01_raw_data/{sample}.fastq.gz"
	output: "03_sam_files/{sample}.sam"
	log: "00_logs/{sample}_align_reads_err.log"
	shell:
		"bwa mem -t 6 '01_raw_data/mm10' '{input.r}' > '{output}' 2> '{log}'"

rule sam_to_bam:
	input: "03_sam_files/{sample}.sam"
	output: "04_bam_files/{sample}.bam"
	log: "00_logs/{sample}_sam_to_bam.log"
	shell: "samtools view -@ 6 -Sb '{input}' > '{output}' 2> '{log}'"

rule sam_fixmate:
	input: "04_bam_files/{sample}.bam"
	output: "04_bam_files/{sample}.fixmate.bam"
	log: "00_logs/{sample}_sam_fixmate.log"
	shell: "samtools fixmate -@ 6 -rcm -O bam '{input}' '{output}' 2> '{log}'"
		
rule sam_sort:
	input: "04_bam_files/{sample}.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.fixmate.bam"
	log: "00_logs/{sample}_sam_sort.log"
	shell: "samtools sort -@ 6 -O bam '{input}' > '{output}' 2> '{log}'"

rule markdup:
	input: "04_bam_files/{sample}.sorted.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam"
	log: "00_logs/{sample}_sam_markdup.log"
	shell: "samtools markdup -@ 6 -r --mode s '{input}' '{output}' 2> '{log}'"

rule bam_index:
	input: "04_bam_files/{sample}.sorted.dedup.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam.bai"
	log: "00_logs/{sample}_bam_index.log"
	shell: "samtools index -@ 6 '{input}' 2> '{log}'"

rule bam_to_bigwig:
	input:
		index = "04_bam_files/{sample}.sorted.dedup.bam.bai",
		bam = "04_bam_files/{sample}.sorted.dedup.bam"
	output: "05_bigwig_files/{sample}.bw"
	log: "00_logs/{sample}_bam_to_bigwig.log"
	shell:
		"bamCoverage -b '{input.bam}' -o '{output}' 2> '{log}'"

def sample_group(wildcards):
	group = Samples[wildcards.sample]
	return expand("04_bam_files/{sample}.sorted.dedup.bam", sample = group)

def control_group(wildcards):
	group = Controls[wildcards.control]
	return expand("04_bam_files/{sample}.sorted.dedup.bam", sample = group)

rule call_peaks:
	input:
		s = sample_group,
		c = control_group	
	output: "06_macs3_peaks/{sample}_{control}_peaks.xls"
	log: "00_logs/{sample}_{control}_macs3_peaks.log"
	run:
		sample_list = []
		control_list = []
		for input_file in input.s: sample_list.append(f'\'{input_file}\'')
		for control_file in input.c: control_list.append(f'\'{control_file}\'')		
		sample_input = ' '.join(sample_list)
		control_input = ' '.join(control_list)
		
		shell("macs3 callpeak -t {sample_input} -c {control_input} -f BAM "
			"-n '{wildcards.sample}_{wildcards.control}' --bdg "
			"--outdir 06_macs3_peaks/  2> '{log}'")

rule fastqc_postprocessing:
	input:
		"04_bam_files/{sample}.sorted.dedup.bam"
	output:
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html",
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip"
	log:
		"00_logs/{sample}_fastqc_postprocessing.log"
	shell:
		"fastqc '{input}' --outdir 02_fastqc_analysis/ 2> '{log}'"
